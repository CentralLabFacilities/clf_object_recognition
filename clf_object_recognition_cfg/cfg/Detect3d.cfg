#!/usr/bin/env python
PACKAGE = "clf_object_recognition_cfg"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

######################
gen.add("publish_detections",    bool_t,    0, "publish detections",  True)
gen.add("publish_marker",    bool_t,    0, "publish visual marker",  True)
gen.add("publish_cloud",    bool_t,    0, "publish last sampled cloud",  False)

gen.add("image_topic",    str_t,    0, "image topic",  "/camera/color/image_raw")
gen.add("depth_topic",    str_t,    0, "depth topic",  "/camera/aligned_depth_to_color/image_raw")
gen.add("info_topic",    str_t,    0, "info topic",  "/camera/depth/camera_info")

#gen.add("image_topic",    str_t,    0, "image topic",  "/xtion/rgb/image_raw")
#gen.add("depth_topic",    str_t,    0, "depth topic",  "/xtion/depth_registered/image_raw")
#gen.add("info_topic",    str_t,    0, "info topic",  "/xtion/depth_registered/camera_info")

matcher_enum = gen.enum([ gen.const("icp",      int_t, 0, "use icp"),
				          gen.const("gicp",     int_t, 1, "use gicp")],
						"Enum for matcher method")

gen.add("matcher", int_t, 0, 
		"Matching method", 
		0, 0, 1, edit_method=matcher_enum)

#### Registration parameters

gen.add("registration_maximum_iterations", int_t,    0,
		 "maximum number of iterations",
		 1000, 1, 10000)

gen.add("registration_ransac_iterations", int_t,    0,
		 "number of iterations RANSAC should run for",
		 100, 1, 10000)

gen.add("registration_ransac_outlier_rejection_threshold", double_t,    0,
		 "inlier distance threshold for the internal RANSAC outlier rejection loop.",
		 1.0, 0, 10)

gen.add("registration_max_correspondence_dist", double_t,    0,
		 "maximum distance threshold between two correspondent points",
		 0.5, 0.01, 5)

gen.add("registration_transformation_epsilon", double_t,    0,
		 "maximum allowable translation squared difference between two consecutive transformations",
		 0.1, 0.001, 2)

gen.add("registration_transformation_rotation_epsilon", double_t,    0,
		 "maximum allowable rotation difference between two consecutive transformations",
		 1.5, 0.001, 3.14)

#### Additional ICP parameters

gen.add("icp_use_reciprocal_correspondence", bool_t,    0,
		 "whether to use reciprocal correspondence or not",
		 False)

#### Additional GICP parameters

gen.add("gicp_correspondence_randomness", int_t,    0,
		 "number of neighbors used when selecting a point neighbourhood to compute covariances",
		 10, 1, 200)

gen.add("gicp_maximum_optimizer_iterations", int_t,    0,
		 "maximum number of iterations at the optimization step",
		 50, 1, 10000)


exit(gen.generate(PACKAGE, "clf_object_recognition_cfg", "Detect3d"))


