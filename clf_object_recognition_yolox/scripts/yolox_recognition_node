#!/usr/bin/env python3

import os
import sys

# ROS
import rospy

import cv2
from cv_bridge import CvBridge, CvBridgeError

from yolox.exp import get_exp

from clf_object_recognition_yolox import recognizer, util
from clf_object_recognition_msgs.srv import Detect2D, Detect2DImage

from sensor_msgs.msg import Image as ImgMsg

from dynamic_reconfigure.server import Server
from clf_object_recognition_cfg.cfg import YoloxConfig

import std_msgs.msg

class YOLOXNode():
	def __init__(self, checkpoint, exp_path, config, timeout = 10):
		rospy.loginfo(logger_name="YOLOXNode", msg="initializing:")
		rospy.loginfo(logger_name="YOLOXNode", msg=f" - checkpoint={checkpoint}")
		rospy.loginfo(logger_name="YOLOXNode", msg=f" - exp_path={exp_path}")
		rospy.loginfo(logger_name="YOLOXNode", msg=f" - timeout={timeout}")

		if rospy.has_param('/object_labels'):
			labels = rospy.get_param('/object_labels')
			self.classes = ()
			for id in labels:
				self.classes = self.classes + (labels[id],)
		else:
			from yolox.data.datasets import COCO_CLASSES
			self.classes = COCO_CLASSES
			rospy.logwarn(logger_name="YOLOXNode", msg="no /object_labels param found")

		self.exp = get_exp(exp_path,"")
		if "conf" in config:
			self.exp.test_conf = config["conf"]

		self.recognizer = recognizer.Recognizer(checkpoint, self.exp)

		self._bridge = CvBridge()

		self.srv = rospy.Service('~recognize', Detect2D, self._recognize_srv_callback)
		self.srv = rospy.Service('~recognize_from_image', Detect2DImage, self._recognize_srv_img_callback)
		self.result_pub = rospy.Publisher('~last_detection', ImgMsg, queue_size=1)

		self.reconf_srv = Server(YoloxConfig, self._reconfigure)

		self.timeout=timeout

		

	def _reconfigure(self, config, level):
		rospy.loginfo(logger_name="YOLOXNode", msg="Reconfigured")
		self.config = config
		return config


	def _recognize_srv_callback(self, req):

		#img = cv2.imread("/media/mediassd/workspace/yolox/src/YOLOX/assets/dog.jpg")

		try:
			rospy.loginfo(logger_name="YOLOXNode", msg="service called, waiting to recieve a message from the camera")
			img_msg = rospy.wait_for_message('~input', ImgMsg, timeout=self.timeout)
		except rospy.ROSException as e:
			rospy.logerr(logger_name="YOLOXNode", msg=e)
			raise Exception("Could not get image in %is" % self.timeout)

		try:
			img = self._bridge.imgmsg_to_cv2(img_msg, "bgr8")
		except CvBridgeError as e:
			error_msg = "Could not convert to opencv image: %s" % e
			rospy.logerr(logger_name="YOLOXNode", msg=error_msg)
			raise Exception(error_msg)

		(cls, scores, bboxes) = self.recognizer.inference(img)

		h = std_msgs.msg.Header()
		h.stamp = rospy.Time.now()

		result = util.tensorsToVisionMessage(cls, scores, bboxes, img_msg.header, thresh = self.exp.test_conf)

		if self.config.save_image or self.config.publish_detections:
			from yolox.utils import vis
			result_image = vis(img, bboxes, scores, cls, self.exp.test_conf, self.classes)
			if self.config.save_image:
				cv2.imwrite("/tmp/yolox_output.jpg", result_image)
			if self.config.publish_detections:
				msg = self._bridge.cv2_to_imgmsg(result_image)
				self.result_pub.publish(msg)

		rospy.loginfo(logger_name="YOLOXNode", msg=f"detected {len(result)} objects")
		return {"detections": result}

	def _recognize_srv_img_callback(self, req):

		try:
			img = self._bridge.imgmsg_to_cv2(req.image, "bgr8")
		except CvBridgeError as e:
			error_msg = "Could not convert to opencv image: %s" % e
			rospy.logerr(logger_name="YOLOXNode", msg=error_msg)
			raise Exception(error_msg)

		(cls, scores, bboxes) = self.recognizer.inference(img)

		h = std_msgs.msg.Header()
		h.stamp = rospy.Time.now()

		result = util.tensorsToVisionMessage(cls, scores, bboxes, req.image.header, thresh = self.exp.test_conf)

		if self.config.save_image or self.config.publish_detections:
			from yolox.utils import vis
			result_image = vis(img, bboxes, scores, cls, self.exp.test_conf, self.classes)
			if self.config.save_image:
				cv2.imwrite("/tmp/yolox_output.jpg", result_image)
			if self.config.publish_detections:
				msg = self._bridge.cv2_to_imgmsg(result_image)
				self.result_pub.publish(msg)

		rospy.loginfo(logger_name="YOLOXNode", msg=f"detected {len(result)} objects")
		return {"detections": result}

if __name__ == '__main__':

	# Start ROS node
	rospy.init_node('yolox')
	
	try:
		_checkpoint = os.path.expanduser(rospy.get_param("~checkpoint"))
		_exp_path = os.path.expanduser(rospy.get_param("~exp"))
		_config = rospy.get_param("~")
	except KeyError as e:
		rospy.logerr(logger_name="YOLOXNode", msg="Parameter %s not found" % e)
		sys.exit(1)

	node = YOLOXNode(_checkpoint, _exp_path, _config)

	rospy.loginfo(logger_name="YOLOXNode", msg="\nyolox running")

	rospy.spin()
